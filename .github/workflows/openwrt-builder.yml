# https://github.com/P3TERX/Actions-OpenWrt
# Build OpenWrt using GitHub Actions (no release)

name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/LiBwrt/openwrt-6.x.git
  REPO_BRANCH: k6.12-nss
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Init build env
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache \
          cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf \
          haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool \
          lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
          python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir && sudo chown $USER:$GROUPS /workdir

    - name: Clean up disk space
      run: |
        echo "=== Before cleanup ==="; df -hT
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt-get remove -y '^ghc-.*' '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' '^postgresql-.*' 'google-chrome-stable' '^libmono-.*' || true
        sudo apt-get -y autoremove --purge || true
        sudo apt-get -y clean
        docker rmi $(docker images -q) || true
        echo "=== After cleanup ==="; df -hT

    - name: Clone source
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth=1 -b "$REPO_BRANCH" "$REPO_URL" openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds (diy-part1.sh)
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt && $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    # ==== 关键：在安装 feeds 之前干掉 Rust，并给 python3 打补丁 + 提供 rust-values 空壳 ====
    - name: Remove Rust toolchain & references, patch python3, add stub rust-values.mk
      run: |
        set -x
        cd openwrt

        # 1) 尽量移除 feeds 里的 Rust 工具链和常见 Rust 包
        rm -rf feeds/packages/lang/rust || true
        rm -rf feeds/packages/devel/rust* feeds/packages/devel/cargo* || true
        rm -rf feeds/packages/net/{tuic*,shadow-tls*,hysteria2*,sing-box*,singbox*,xray-plugin-rust*} || true

        # 2) 移除 makefile 中对 rust 的 include / 依赖（避免再次被拉起）
        grep -RIl "lang/rust/host" feeds | xargs -r sed -i 's,lang/rust/host,,g'
        grep -RIl 'include.*/rust\.mk' feeds | xargs -r -n1 dirname | xargs -r rm -rf

        # 3) patch python3：删除对 rust-values.mk 的 include 行（可能位于 host/package 两个 mk）
        sed -i '/rust\/rust-values\.mk/d' feeds/packages/lang/python/python3-host.mk || true
        sed -i '/rust\/rust-values\.mk/d' feeds/packages/lang/python/python3-package.mk || true

        # 4) 提供一个最小的“假” rust-values.mk，防止其它包误 include
        mkdir -p feeds/packages/lang/rust
        cat > feeds/packages/lang/rust/rust-values.mk <<'EOF'
# Stub file to bypass Rust toolchain in CI
RUSTC:=
CARGO:=
define SetupRust
endef
EOF

    - name: Replace golang package (avoid Go 版本坑)
      run: |
        cd openwrt
        rm -rf feeds/packages/lang/golang
        git clone --depth=1 https://github.com/kenzok8/golang feeds/packages/lang/golang

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration (diy-part2.sh)
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt && $GITHUB_WORKSPACE/$DIY_P2_SH

    # 再保险：把 .config 里残留的 Rust/tuic 等全关掉
    - name: Force-disable rust-related Kconfig & clean tmp
      run: |
        cd openwrt
        sed -i '/rust/I d' .config
        sed -i '/tuic/I d' .config
        sed -i '/shadow/I d' .config
        sed -i '/hysteria2/I d' .config
        sed -i '/sing-.*box/I d' .config
        for k in \
          CONFIG_LANG_RUST CONFIG_PACKAGE_rust CONFIG_PACKAGE_rustup CONFIG_PACKAGE_cargo \
          CONFIG_PACKAGE_shadow-tls CONFIG_PACKAGE_tuic CONFIG_PACKAGE_hysteria2 \
          CONFIG_PACKAGE_sing-box CONFIG_PACKAGE_singbox CONFIG_PACKAGE_xray-plugin-rust \
        ; do sed -i "/^$k=/d" .config; echo "$k=n" >> .config; done
        make defconfig

        # 清除可能的历史残留
        rm -rf tmp \
               build_dir/host build_dir/hostpkg \
               build_dir/target-*/*/host/rustc-* \
               staging_dir/hostpkg \
               package/feeds/packages/rust || true

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \; || true
        find dl -size -1024c -exec rm -f {} \; || true

    - name: Compile firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME || true
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
